// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protos/txt2img/v1/txt2img.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Txt2ImgServiceClient is the client API for Txt2ImgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Txt2ImgServiceClient interface {
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
}

type txt2ImgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTxt2ImgServiceClient(cc grpc.ClientConnInterface) Txt2ImgServiceClient {
	return &txt2ImgServiceClient{cc}
}

func (c *txt2ImgServiceClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, "/txt2img.v1.Txt2ImgService/GenerateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txt2ImgServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, "/txt2img.v1.Txt2ImgService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txt2ImgServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, "/txt2img.v1.Txt2ImgService/ListImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txt2ImgServiceClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, "/txt2img.v1.Txt2ImgService/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Txt2ImgServiceServer is the server API for Txt2ImgService service.
// All implementations must embed UnimplementedTxt2ImgServiceServer
// for forward compatibility
type Txt2ImgServiceServer interface {
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	mustEmbedUnimplementedTxt2ImgServiceServer()
}

// UnimplementedTxt2ImgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTxt2ImgServiceServer struct {
}

func (UnimplementedTxt2ImgServiceServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedTxt2ImgServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedTxt2ImgServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedTxt2ImgServiceServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedTxt2ImgServiceServer) mustEmbedUnimplementedTxt2ImgServiceServer() {}

// UnsafeTxt2ImgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Txt2ImgServiceServer will
// result in compilation errors.
type UnsafeTxt2ImgServiceServer interface {
	mustEmbedUnimplementedTxt2ImgServiceServer()
}

func RegisterTxt2ImgServiceServer(s grpc.ServiceRegistrar, srv Txt2ImgServiceServer) {
	s.RegisterService(&Txt2ImgService_ServiceDesc, srv)
}

func _Txt2ImgService_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txt2ImgServiceServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txt2img.v1.Txt2ImgService/GenerateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txt2ImgServiceServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txt2ImgService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txt2ImgServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txt2img.v1.Txt2ImgService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txt2ImgServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txt2ImgService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txt2ImgServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txt2img.v1.Txt2ImgService/ListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txt2ImgServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txt2ImgService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txt2ImgServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txt2img.v1.Txt2ImgService/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txt2ImgServiceServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Txt2ImgService_ServiceDesc is the grpc.ServiceDesc for Txt2ImgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Txt2ImgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txt2img.v1.Txt2ImgService",
	HandlerType: (*Txt2ImgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImage",
			Handler:    _Txt2ImgService_GenerateImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Txt2ImgService_GetImage_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _Txt2ImgService_ListImages_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Txt2ImgService_DeleteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/txt2img/v1/txt2img.proto",
}
