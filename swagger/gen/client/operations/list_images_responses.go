// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/eddiezane/open-source-summit-eu-2022-api-codegen/swagger/gen/models"
)

// ListImagesReader is a Reader for the ListImages structure.
type ListImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListImagesOK creates a ListImagesOK with default headers values
func NewListImagesOK() *ListImagesOK {
	return &ListImagesOK{}
}

/*
ListImagesOK describes a response with status code 200, with default header values.

OK
*/
type ListImagesOK struct {
	Payload *ListImagesOKBody
}

// IsSuccess returns true when this list images o k response has a 2xx status code
func (o *ListImagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list images o k response has a 3xx status code
func (o *ListImagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list images o k response has a 4xx status code
func (o *ListImagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list images o k response has a 5xx status code
func (o *ListImagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list images o k response a status code equal to that given
func (o *ListImagesOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListImagesOK) Error() string {
	return fmt.Sprintf("[GET /v1/images][%d] listImagesOK  %+v", 200, o.Payload)
}

func (o *ListImagesOK) String() string {
	return fmt.Sprintf("[GET /v1/images][%d] listImagesOK  %+v", 200, o.Payload)
}

func (o *ListImagesOK) GetPayload() *ListImagesOKBody {
	return o.Payload
}

func (o *ListImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListImagesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListImagesOKBody list images o k body
swagger:model ListImagesOKBody
*/
type ListImagesOKBody struct {

	// images
	Images []*models.Image `json:"images"`
}

// Validate validates this list images o k body
func (o *ListImagesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListImagesOKBody) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(o.Images) { // not required
		return nil
	}

	for i := 0; i < len(o.Images); i++ {
		if swag.IsZero(o.Images[i]) { // not required
			continue
		}

		if o.Images[i] != nil {
			if err := o.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listImagesOK" + "." + "images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listImagesOK" + "." + "images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list images o k body based on the context it is used
func (o *ListImagesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListImagesOKBody) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Images); i++ {

		if o.Images[i] != nil {
			if err := o.Images[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listImagesOK" + "." + "images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listImagesOK" + "." + "images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListImagesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListImagesOKBody) UnmarshalBinary(b []byte) error {
	var res ListImagesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
